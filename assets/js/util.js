define(["js/sylvester"],function(a){const b={windowToViewport(b,c,d,e){let f=(e.elements[0]-d.elements[0])/(c.elements[0]-b.elements[0]),g=(e.elements[1]-d.elements[1])/(c.elements[1]-b.elements[1]),h=a.Matrix.I(4);return h.elements[0][0]=f,h.elements[1][1]=g,h.elements[0][3]=-b.elements[0]*f+d.elements[0],h.elements[1][3]=-b.elements[1]*g+d.elements[1],h},persProj(b){let c=a.Matrix.I(4);return c.elements[2][2]=0,c.elements[3][2]=-1/b,c}},c={homogenousDivide(a){return a.multiply(1/a.elements[3])},dot(a,b){let c=0;for(let d=0;3>d;++d)c+=a.elements[d]*b.elements[d];return c},cross(b,c){const d=b.elements[1]*c.elements[2]-b.elements[2]*c.elements[1],e=b.elements[2]*c.elements[0]-b.elements[0]*c.elements[2],f=b.elements[0]*c.elements[1]-b.elements[1]*c.elements[0];return a.$V([d,e,f,1])},normalize(b){let c=0;for(let a=0;3>a;++a)c+=b.elements[a]*b.elements[a];c=Math.sqrt(c),res=a.$V([0,0,0,1]);for(let a=0;3>a;++a)res.elements[a]=b.elements[a]/c;return res},sub(a,b){let c=a.subtract(b);return c.elements[3]=a.elements[3],c},add(){}},d=(a)=>[].concat.apply([],a),e=function(){const b=[];for(let c=0;c<=2*Math.PI+0.1;c+=0.1)b.push(a.$V([Math.cos(c),Math.sin(c)]));return function(a,d){const e=b.map((a)=>a.multiply(d)).map((b)=>b.add(a));return e.unshift(a.dup()),e}}();return{flattenArray:d,line:function(a,b,c){const d=[];for(let e=0;1>e;e+=c){const c=a.multiply(1-e).add(b.multiply(e));d.push(c)}return d},toPositionArray:function(a){return d(a.map((a)=>a.elements))},arrowHead:function(b,c,d){const e=c.subtract(b).toUnitVector(),f=a.$V([e.elements[1],-e.elements[0]]),g=[c.add(e.multiply(1.25*d)),c.add(f.multiply(d)),c.add(f.multiply(-d))];return g},circle:e,matrix:b,vec:c}});