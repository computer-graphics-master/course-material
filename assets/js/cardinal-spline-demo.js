define(['js/twgl','js/2d-boilerplate','js/sylvester','js/style','js/util','js/matrix-form'],function(a,b,c,d,e,f){'use strict';const g={CardinalSplineDemo(a,b){this.Program(this.render,{container:a,idPrefix:b,width:640,height:480}),this.points=[],this.curvePoints=[],this.isDragging=!1,this.isMouseJustPressed=!0,this.draggedPoint=null,this.tension=0,this.minPoints=4,this.calculateCoefficientMatrix()},initDOM(){const a=this.settings.container;a.css('display','flex');const b=$('<span></span>');b.css('flex','1');const c=$('<div></div>');c.addClass('canvas-controller'),c.append(this.createNumberInput('Tension','tension',0,-5,1,'any',(a)=>this.changeTension(a))),b.append(c);const d=$('<span></span>');d.css('flex','2'),d.append(this.canvasMarkup()),a.append(b),a.append(d)},createNumberInput(a,b,c,d,e,f,g){const h=this.withPrefix(b),i=$('<span></span>');i.addClass('slider-container');const j=$(`<input type="range" value="${c}" min="${d}" max="${e}" id="${h}" name="${h}" step="${f}"/>`);j.on('input',g),i.append(`<span class="slider-min-label">${d}</span>`),i.append(j),i.append(`<span class="slider-max-label">${e}</span>`);const k=$('<div></div>');return k.addClass('controller-input-container'),k.append(`<label for="${h}">${a}</label>`),k.append(i),k},changeTension(a){const b=Number.parseFloat(a.target.value);Number.isNaN(b)||(this.tension=b,this.calculateCoefficientMatrix())},getClickedPoint(a){for(let b=0;b<this.points.length;++b)if(10>=this.points[b].distanceFrom(a))return this.points[b];return null},onMouseDown(a){this.isMouseJustPressed&&(this.draggedPoint=this.getClickedPoint(a),this.draggedPoint?this.isDragging=!0:this.points.push(a),this.isMouseJustPressed=!1)},onMouseUp(){this.isDragging=!1,this.draggedPoint=null,this.isMouseJustPressed=!0},onMouseMove(a){this.isDragging&&this.draggedPoint&&(this.draggedPoint.elements=a.elements)},calculateCoefficientMatrix(){const a=0.5*(1-this.tension);this.coefficientMatrix=c.$M([[-a,2*a,-a,0],[2-a,a-3,0,1],[a-2,3-2*a,a,0],[a,-a,0,0]]),this.curveCalculator=f(this.coefficientMatrix)},calculateCurve(){if(this.curvePoints=[],this.points.length>=this.minPoints)for(let a=0;a<this.points.length-3;++a)this.curvePoints=this.curvePoints.concat(this.calculatePiece(a))},calculatePiece(a){const b=this.points.slice(a,a+4);return this.curveCalculator(b)},render(){this.calculateCurve(),this.renderPoints(),this.renderCurve()},renderCurve(){const b={color:d.colors.curve},c={position:{numComponents:2,data:e.toPositionArray(this.curvePoints)}},f=a.createBufferInfoFromArrays(this.gl,c);a.setBuffersAndAttributes(this.gl,this.programInfo,f),a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,f,this.gl.LINE_STRIP)},renderPoints(){const b={color:d.colors.controlPolygon},c={position:{numComponents:2,data:e.toPositionArray(this.points)}},f=a.createBufferInfoFromArrays(this.gl,c);a.setBuffersAndAttributes(this.gl,this.programInfo,f),a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,f,this.gl.LINE_STRIP),b.color=d.colors.controlPoint,a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,f,this.gl.POINTS)}};return Object.setPrototypeOf(g,b),function(a,b){const c=Object.create(g);c.CardinalSplineDemo(a,b),c.start(!1)}});