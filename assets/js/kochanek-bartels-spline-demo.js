define(['js/twgl','js/2d-boilerplate','js/sylvester','js/style','js/util','js/matrix-form'],function(a,b,c,d,e,f){'use strict';var g=Number.isNaN,h=Number.parseFloat;const i={KochanekBartelsSplineDemo(a,b){this.Program(this.render,{container:a,idPrefix:b,width:640,height:480}),this.points=[],this.curvePoints=[],this.isDragging=!1,this.isMouseJustPressed=!0,this.draggedPoint=null,this.isClosed=!1,this.isShowTangents=!1,this.tension=0,this.bias=0,this.continuity=0,this.minPoints=4,this.calculateCoefficientMatrix()},initDOM(){const a=this.settings.container;a.css('display','flex');const b=$('<span></span>');b.css('flex','1');const c=$('<div></div>');c.addClass('canvas-controller'),c.append(this.createNumberInput('Tension','tension',0,-5,1,'any',(a)=>this.changeTension(a))),c.append(this.createNumberInput('Bias','bias',0,-5,5,'any',(a)=>this.changeBias(a))),c.append(this.createNumberInput('Continuity','continuity',0,-5,5,'any',(a)=>this.changeContinuity(a))),c.append(this.createCheckbox('Z\xE1rt g\xF6rbe','isclosed',(a)=>this.changeIsClosed(a))),c.append(this.createCheckbox('\xC9rint\u0151vektorok megjelen\xEDt\xE9se','isshowtangents',(a)=>this.changeIsShowTangents(a))),b.append(c);const d=$('<span></span>');d.css('flex','2'),d.append(this.canvasMarkup()),a.append(b),a.append(d)},createNumberInput(a,b,c,d,e,f,g){const h=this.withPrefix(b),i=$('<span></span>');i.addClass('slider-container');const j=$(`<input type="range" value="${c}" min="${d}" max="${e}" id="${h}" name="${h}" step="${f}"/>`);j.on('input',g),i.append(`<span class="slider-min-label">${d}</span>`),i.append(j),i.append(`<span class="slider-max-label">${e}</span>`);const k=$('<div></div>');return k.addClass('controller-input-container'),k.append(`<label for="${h}">${a}</label>`),k.append(i),k},createCheckbox(a,b,c){const d=this.withPrefix(b),e=$(`<input type="checkbox" id="${d}" name="${d}"/>`);e.on('change',c);const f=$('<div></div>');return f.addClass('controller-input-container'),f.append(`<label for="${d}">${a}</label>`),f.append(e),f},changeTension(a){const b=h(a.target.value);g(b)||(this.tension=b,this.calculateCoefficientMatrix())},changeBias(a){const b=h(a.target.value);g(b)||(this.bias=b,this.calculateCoefficientMatrix())},changeContinuity(a){const b=h(a.target.value);g(b)||(this.continuity=b,this.calculateCoefficientMatrix())},changeIsClosed(a){this.isClosed=a.target.checked},changeIsShowTangents(a){this.isShowTangents=a.target.checked},getClickedPoint(a){for(let b=0;b<this.points.length;++b)if(10>=this.points[b].distanceFrom(a))return this.points[b];return null},onMouseDown(a){this.isMouseJustPressed&&(this.draggedPoint=this.getClickedPoint(a),this.draggedPoint?this.isDragging=!0:this.points.push(a),this.isMouseJustPressed=!1)},onMouseUp(){this.isDragging=!1,this.draggedPoint=null,this.isMouseJustPressed=!0},onMouseMove(a){this.isDragging&&this.draggedPoint&&(this.draggedPoint.elements=a.elements)},calculateCoefficientMatrix(){const a=0.5*(1-this.tension),b=a*(1+this.bias)*(1-this.continuity),d=a*(1-this.bias)*(1+this.continuity),e=a*(1+this.bias)*(1+this.continuity),g=a*(1-this.bias)*(1-this.continuity);this.coefficientMatrix=c.$M([[-b,2*b,-b,0],[b-d-e+2,e-2*b+2*d-3,b-d,1],[d+e-g-2,g-e-2*d+3,d,0],[g,-g,0,0]]),this.curveCalculator=f(this.coefficientMatrix)},calculateCurve(){if(this.curvePoints=[],this.points.length>=this.minPoints){let a=this.isClosed?this.points.length:this.points.length-3;for(let b=0;b<a;++b)this.curvePoints=this.curvePoints.concat(this.calculatePiece(b))}},calculatePiece(a){const b=[this.points[a%this.points.length],this.points[(a+1)%this.points.length],this.points[(a+2)%this.points.length],this.points[(a+3)%this.points.length]];return this.calculateTangentsFor(b),this.curveCalculator(b)},calculateTangentsFor(a){const b=0.5*(1-this.tension),c=b*(1+this.bias)*(1-this.continuity),d=b*(1-this.bias)*(1+this.continuity),e=b*(1+this.bias)*(1+this.continuity),f=b*(1-this.bias)*(1-this.continuity);let g=a[1].subtract(a[0]).multiply(c).add(a[2].subtract(a[1]).multiply(d)).add(a[1]),h=a[2].subtract(a[1]).multiply(e).add(a[3].subtract(a[2]).multiply(f)).add(a[2]);this.tangentIns.push(a[1],g),this.tangentOuts.push(a[2],h)},render(){this.tangentIns=[],this.tangentOuts=[],this.calculateCurve(),this.renderPoints(),this.renderCurve(),this.isShowTangents&&(this.renderTangents(),this.renderArrowHeads())},renderCurve(){const b={color:d.colors.curve},c={position:{numComponents:2,data:e.toPositionArray(this.curvePoints)}},f=a.createBufferInfoFromArrays(this.gl,c);a.setBuffersAndAttributes(this.gl,this.programInfo,f),a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,f,this.gl.LINE_STRIP)},renderTangents(){const b={color:d.colors.red},c={position:{numComponents:2,data:e.toPositionArray(this.tangentIns)}},f=a.createBufferInfoFromArrays(this.gl,c);a.setBuffersAndAttributes(this.gl,this.programInfo,f),a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,f,this.gl.LINES),c.position.data=e.toPositionArray(this.tangentOuts);const g=a.createBufferInfoFromArrays(this.gl,c);b.color=d.colors.blue,a.setBuffersAndAttributes(this.gl,this.programInfo,g),a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,g,this.gl.LINES)},renderArrowHeads(){const b={color:d.colors.red},c={position:{numComponents:2,data:[]}};for(let a=0;a<this.tangentIns.length;a+=2)c.position.data=c.position.data.concat(e.toPositionArray(e.arrowHead(this.tangentIns[a],this.tangentIns[a+1],6)));const f=a.createBufferInfoFromArrays(this.gl,c);a.setBuffersAndAttributes(this.gl,this.programInfo,f),a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,f,this.gl.TRIANGLES),c.position.data=[];for(let a=0;a<this.tangentIns.length;a+=2)c.position.data=c.position.data.concat(e.toPositionArray(e.arrowHead(this.tangentOuts[a],this.tangentOuts[a+1],6)));const g=a.createBufferInfoFromArrays(this.gl,c);b.color=d.colors.blue,a.setBuffersAndAttributes(this.gl,this.programInfo,g),a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,g,this.gl.TRIANGLES)},renderPoints(){const b={color:d.colors.controlPolygon},c={position:{numComponents:2,data:e.toPositionArray(this.points)}},f=a.createBufferInfoFromArrays(this.gl,c);a.setBuffersAndAttributes(this.gl,this.programInfo,f),a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,f,this.gl.LINE_STRIP),b.color=d.colors.controlPoint,a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,f,this.gl.POINTS)}};return Object.setPrototypeOf(i,b),function(a,b){const c=Object.create(i);c.KochanekBartelsSplineDemo(a,b),c.start(!1)}});