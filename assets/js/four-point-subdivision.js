define(['js/twgl','js/2d-boilerplate','js/sylvester','js/style','js/util'],function(a,b,c,d,e){'use strict';const f={FourPointSubdivision(a,b){this.Program(this.render,{container:a,idPrefix:b,width:640,height:480}),this.points=[],this.showIteration=[!0,!0,!0,!0,!0],this.curves=[{color:d.colors.lightGray,points:[]},{color:d.colors.darkGray,points:[]},{color:d.colors.darkGray,points:[]},{color:d.colors.darkGray,points:[]},{color:d.colors.darkOrange,points:[]}],this.isDragging=!1,this.isMouseJustPressed=!0,this.draggedPoint=null,this.pointCount=4,this.beta=0,this.calculateGrid()},initDOM(){const a=this.settings.container;a.css('display','flex');const b=$('<span></span>');b.css('flex','1');const c=$('<div></div>');c.addClass('canvas-controller'),c.append(this.createButton('restart','Pontok t\xF6rl\xE9se',()=>this.restart())),c.append(this.createNumberInput('Tension','tension',this.beta,-2,0.01,(a)=>this.changeBeta(a)));for(let a=1;a<this.curves.length;++a)c.append(this.createCheckbox(`${a}. iteráció megjelenítése`,`${a}th-iteration`,(b)=>this.changeShowIteration(b,a)));b.append(c);const d=$('<span></span>');d.css('flex','2'),d.append(this.canvasMarkup()),a.append(b),a.append(d)},createNumberInput(a,b,c,d,e,f){const g=this.withPrefix(b),h=$('<span></span>');h.addClass('slider-container');const i=$(`<input type="number" value="${c}" min="${d}" id="${g}" name="${g}" step="${e}"/>`);i.on('input',f),h.append(i);const j=$('<div></div>');return j.addClass('controller-input-container'),j.append(`<label for="${g}">${a}</label>`),j.append(h),j},createButton(a,b,c){const d=this.withPrefix(a),e=$('<span></span>');e.addClass('slider-container');const f=$(`<button>${b}</button>`);f.on('click',c),e.append(f);const g=$('<div></div>');return g.addClass('controller-input-container'),g.append(e),g},createCheckbox(a,b,c){const d=this.withPrefix(b),e=$(`<input checked type="checkbox" id="${d}" name="${d}"/>`);e.on('change',c);const f=$('<div></div>');return f.addClass('controller-input-container'),f.append(`<label for="${d}">${a}</label>`),f.append(e),f},calculateGrid(){this.grid=[];for(let a=0;a<this.settings.width;a+=20)this.grid.push(c.$V([a,0]),c.$V([a,this.settings.height]));for(let a=0;a<this.settings.height;a+=20)this.grid.push(c.$V([0,a]),c.$V([this.settings.width,a]))},changeShowIteration(a,b){this.showIteration[b]=a.target.checked},changeBeta(a){const b=Number.parseFloat(a.target.value);Number.isNaN(b)||(this.beta=b)},getClickedPoint(a){for(let b=0;b<this.points.length;++b)if(10>=this.points[b].distanceFrom(a))return this.points[b];return null},onMouseDown(a){this.isMouseJustPressed&&!this.refined&&(this.draggedPoint=this.getClickedPoint(a),this.draggedPoint?this.isDragging=!0:this.points.push(a),this.isMouseJustPressed=!1)},onMouseUp(){this.isDragging=!1,this.draggedPoint=null,this.isMouseJustPressed=!0},onMouseMove(a){this.isDragging&&this.draggedPoint&&(this.draggedPoint.elements=a.elements)},restart(){this.points=[],this.curves.forEach((a)=>a.points=[])},calculateCurve(){this.curves[0].points=[].concat(this.points);let c=this.beta;for(let b=1;b<this.curves.length;++b){const d=[],e=this.curves[b-1].points,f=e.length;c=Math.sqrt(2+c);let h=-1/(3*(1-c*c)*(1+c));const g=[1/60*(-90*h-1),1/60*(90*h+43),1/60*(90*h+17),1/60*(-90*h+1)];for(let a=0;a<f;++a){const b=0==a?f-1:a-1,c=(a+1)%f,h=(a+2)%f;d.push(e[a]);const i=e[b].multiply(g[0]).add(e[a].multiply(g[1])).add(e[c].multiply(g[2])).add(e[h].multiply(g[3])),j=e[b].multiply(g[3]).add(e[a].multiply(g[2])).add(e[c].multiply(g[1])).add(e[h].multiply(g[0]));d.push(i),d.push(j)}this.curves[b].points=[].concat(d)}},render(){this.renderGrid(),this.points.length>=this.pointCount&&(this.calculateCurve(),this.curves.forEach(function(a,b){this.showIteration[b]&&this.renderCurve(a)}.bind(this))),this.renderOriginal()},renderGrid(){const b={color:d.colors.ultraLightGray},c={position:{numComponents:2,data:[].concat.apply([],this.grid.map((a)=>a.elements))}},e=a.createBufferInfoFromArrays(this.gl,c);a.setBuffersAndAttributes(this.gl,this.programInfo,e),a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,e,this.gl.LINES)},renderOriginal(){const b={color:d.colors.controlPoint},c={position:{numComponents:2,data:[].concat.apply([],this.points.map((a)=>a.elements))}},e=a.createBufferInfoFromArrays(this.gl,c);a.setBuffersAndAttributes(this.gl,this.programInfo,e),a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,e,this.gl.POINTS)},renderCurve(b){const c={color:b.color},d={position:{numComponents:2,data:e.toPositionArray(b.points)}},f=a.createBufferInfoFromArrays(this.gl,d);a.setBuffersAndAttributes(this.gl,this.programInfo,f),a.setUniforms(this.programInfo,c),a.drawBufferInfo(this.gl,f,this.gl.LINE_LOOP)},renderPoints(){const b={color:d.colors.controlPoint},c={position:{numComponents:2,data:e.toPositionArray(this.curvePoints)}};this.isShowActual||(c.position.data=[]);const f=a.createBufferInfoFromArrays(this.gl,c);a.setBuffersAndAttributes(this.gl,this.programInfo,f),a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,f,this.gl.POINTS)}};return Object.setPrototypeOf(f,b),function(a,b){const c=Object.create(f);c.FourPointSubdivision(a,b),c.start(!1)}});