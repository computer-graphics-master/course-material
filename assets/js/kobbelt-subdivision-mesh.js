define(['js/sylvester','js/style','js/util','js/transformation-chain','js/lomont-half-edge'],function(a,b,d,c){'use strict';const e=function(e){const f=this.halfEdges[this.faces[e].halfEdge],g=this.halfEdges[f.next],h=this.halfEdges[g.next],i=this.transformedVertices[f.vertex],a=this.transformedVertices[g.vertex],b=this.transformedVertices[h.vertex],c=d.vec.cross(i.subtract(a),i.subtract(b));return d.vec.normalize(c)},f={KobbeltSubdivisionMesh(){this.vertices=[],this.faces=[],this.halfEdges=[],this.transformedVertices=[],this.normals=[],this.init(),this.visibilityTransformationChain=Object.create(c),this.visibilityTransformationChain.TransformationChain(),this.transformationChain=Object.create(c),this.transformationChain.TransformationChain();for(let b=0;b<this.vertices.length;++b)this.transformedVertices.push(a.$V([0,0,0,1]))},init(){this.vertices.push({vector:a.$V([-1,1,-1,1]),halfEdge:0}),this.vertices.push({vector:a.$V([-1,1,1,1]),halfEdge:4}),this.vertices.push({vector:a.$V([1,1,1,1]),halfEdge:10}),this.vertices.push({vector:a.$V([1,1,-1,1]),halfEdge:6}),this.vertices.push({vector:a.$V([-1,-1,1,1]),halfEdge:31}),this.vertices.push({vector:a.$V([-1,-1,-1,1]),halfEdge:34}),this.vertices.push({vector:a.$V([1,-1,-1,1]),halfEdge:9}),this.vertices.push({vector:a.$V([1,-1,1,1]),halfEdge:11}),this.faces=[0,3,6,9,12,15,18,21,24,27,30,33].map((a)=>({halfEdge:a})),this.halfEdges=[[1,1,17,0],[3,2,3,0],[0,0,22,0],[1,4,1,1],[2,5,26,1],[3,3,6,1],[2,7,5,2],[6,8,9,2],[3,6,23,2],[2,10,7,3],[7,11,29,3],[6,9,35,3],[4,13,31,4],[0,14,15,4],[5,12,18,4],[4,16,13,5],[1,17,24,5],[0,15,0,5],[0,19,14,6],[6,20,21,6],[5,18,34,6],[0,22,19,7],[3,23,2,7],[6,21,8,7],[4,25,16,8],[2,26,27,8],[1,24,4,8],[4,28,25,9],[7,29,30,9],[2,27,10,9],[4,31,28,10],[5,32,12,10],[7,30,33,10],[5,34,32,11],[6,35,20,11],[7,33,11,11]].map((a)=>{return{vertex:a[0],next:a[1],pair:a[2],face:a[3],cutting:0}})},update(a,b){this.transformationChain.recalculate(),this.visibilityTransformationChain.recalculate();const c=this.visibilityTransformationChain.getResult();for(let e,f=0;f<this.transformedVertices.length;++f)e=c.multiply(this.vertices[f].vector),e=d.vec.homogenousDivide(e),this.transformedVertices[f]=e;for(let c=0;c<this.faces.length;++c){let a=this.faces[c].halfEdge,b=0;this.faces[c].z=0;do this.faces[c].z=this.transformedVertices[this.halfEdges[a].vertex].elements[2],a=this.halfEdges[a].next,b+=1;while(a!=this.faces[c].halfEdge);this.faces[c].z/=b}const f=[];for(let c,g=0;g<this.faces.length;++g){c=d.vec.sub(a,this.transformedVertices[this.halfEdges[this.faces[g].halfEdge].vertex]),c=d.vec.normalize(c);const h=e.call(this,g);if(0<d.vec.dot(h,c)){let a=d.vec.dot(b,h)+1;a/=2,this.faces[g].shade=a,f.push(g)}}return f},resetTransformedVertices(){for(let a=0;a<this.vertices.length;++a)this.transformedVertices[a]=this.vertices[a].vector.dup()},getStartVertex(a){this.newHalfEdges[a].face;let b,c=a;do b=c,c=this.newHalfEdges[c].next;while(c!=a);return this.newHalfEdges[b].vertex},doSubdivision(){this.edgePoints=[],this.facePoints=[],this.newVertices=this.vertices.map((a)=>{return Object.assign({},a)}),this.newFaces=[],this.newHalfEdges=[];for(let b=0;b<this.faces.length;++b){let c=a.$V([0,0,0,1]),d=this.faces[b].halfEdge;do{const a=this.vertices[this.halfEdges[d].vertex].vector;c=c.add(a),d=this.halfEdges[d].next}while(d!=this.faces[b].halfEdge);c=c.multiply(1/3),c.elements[3]=1,this.newVertices.push({vector:c})}for(let b=0;b<this.vertices.length;++b){let c=this.vertices[b].halfEdge,d=a.$V([0,0,0,1]);this.vertices[b].neighbours=0;do{const a=this.vertices[this.halfEdges[c].vertex].vector;d=d.add(a),this.vertices[b].neighbours+=1,c=this.halfEdges[this.halfEdges[c].pair].next}while(c!=this.vertices[b].halfEdge);d.elements[3]=1;const e=1/9*(4-2*Math.cos(3.141592653589793*2/this.vertices[b].neighbours)),f=this.vertices[b].vector.multiply(1-e);f.elements[3]=1;const g=d.multiply(e/this.vertices[b].neighbours).add(f);g.elements[3]=1,this.newVertices[b].vector=g}let d=this.vertices.length;for(let a=0;a<this.halfEdges.length;++a)this.halfEdges[a].cutting=-1;let e=0,g=0;for(let h=0;h<this.vertices.length;++h){let i=this.vertices[h].halfEdge,j=0,k=this.newHalfEdges.length;do{let l={halfEdge:e};this.newFaces.push(l);let f=this.halfEdges[i].pair,m=this.halfEdges[i].face+d,n=this.halfEdges[f].face+d;this.newVertices[h].halfEdge=e+1,this.newVertices[m].halfEdge=e,this.newVertices[n].halfEdge=e+2;let o={},a={},b={};this.halfEdges[i].cutting=e+2,o.face=g,o.next=e+1,o.vertex=h,a.face=g,a.next=e+2,a.vertex=n,b.face=g,b.next=e,b.vertex=m,o.pair=k+(3*j+3*this.vertices[h].neighbours-2)%(3*this.vertices[h].neighbours),a.pair=k+3*(j+1)%(3*this.vertices[h].neighbours),this.newHalfEdges.push(o),this.newHalfEdges.push(a),this.newHalfEdges.push(b),++g,++j,e+=3,i=this.halfEdges[f].next}while(i!=this.vertices[h].halfEdge)}this.vertices=[].concat(this.newVertices);for(let a=0;a<this.halfEdges.length;++a){let b=this.halfEdges[a].cutting,c=this.halfEdges[this.halfEdges[a].pair].cutting;this.newHalfEdges[b].pair=c,this.newHalfEdges[c].pair=b}this.faces=[].concat(this.newFaces),this.halfEdges=[].concat(this.newHalfEdges),this.transformedVertices=[];for(let b=0;b<this.vertices.length;++b)this.transformedVertices.push(a.$V([0,0,0,1]))}};return f});