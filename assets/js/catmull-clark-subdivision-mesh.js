define(['js/sylvester','js/style','js/util','js/transformation-chain','js/catmull-clark-half-edge'],function(a,b,d,c,e){'use strict';var f=Math.floor;const g=function(e){let f=this.transformedVertices[this.faces[e].vertices[0]],a=this.transformedVertices[this.faces[e].vertices[1]],b=this.transformedVertices[this.faces[e].vertices[2]];const c=d.vec.cross(f.subtract(a),f.subtract(b));return d.vec.normalize(c)},h={CatmullClarkSubdivisionMesh(){this.vertices=[],this.faces=[],this.halfEdges=[],this.transformedVertices=[],this.normals=[],this.init(),this.visibilityTransformationChain=Object.create(c),this.visibilityTransformationChain.TransformationChain(),this.transformationChain=Object.create(c),this.transformationChain.TransformationChain();for(let b=0;b<this.vertices.length;++b)this.transformedVertices.push(a.$V([0,0,0,1]))},init(){this.vertices.push({vector:a.$V([-1,-1,-1,1]),halfEdge:3}),this.vertices.push({vector:a.$V([1,-1,-1,1]),halfEdge:0}),this.vertices.push({vector:a.$V([1,-1,1,1]),halfEdge:14}),this.vertices.push({vector:a.$V([-1,-1,1,1]),halfEdge:4}),this.vertices.push({vector:a.$V([-1,1,-1,1]),halfEdge:8}),this.vertices.push({vector:a.$V([1,1,-1,1]),halfEdge:12}),this.vertices.push({vector:a.$V([1,1,1,1]),halfEdge:20}),this.vertices.push({vector:a.$V([-1,1,1,1]),halfEdge:16}),this.faces=[[0,1,2,3],[0,3,7,4],[0,4,5,1],[1,5,6,2],[4,7,6,5],[2,6,7,3]].map((a)=>{return{vertices:a,facePoint:-1,z:0,shade:0}}),this.halfEdges=[11,15,23,4,3,22,16,8,7,19,12,0,10,18,20,1,6,21,13,9,14,17,5,2].map((a)=>{return{pair:a}})},update(a,b){this.transformationChain.recalculate(),this.visibilityTransformationChain.recalculate();const c=this.visibilityTransformationChain.getResult();for(let e,f=0;f<this.transformedVertices.length;++f)e=c.multiply(this.vertices[f].vector),e=d.vec.homogenousDivide(e),this.transformedVertices[f]=e;for(let c=0;c<this.faces.length;++c)this.faces[c].z=this.transformedVertices[this.faces[c].vertices[0]].elements[2]+this.transformedVertices[this.faces[c].vertices[1]].elements[2]+this.transformedVertices[this.faces[c].vertices[2]].elements[2]+this.transformedVertices[this.faces[c].vertices[3]].elements[2],this.faces[c].z/=4;const e=[];for(let c,f=0;f<this.faces.length;++f){c=d.vec.sub(a,this.transformedVertices[this.faces[f].vertices[0]]),c=d.vec.normalize(c);const h=g.call(this,f);if(0<=d.vec.dot(h,c)){let a=d.vec.dot(b,h)+1;a/=2,this.faces[f].shade=a,e.push(f)}}return e},resetTransformedVertices(){for(let a=0;a<this.vertices.length;++a)this.transformedVertices[a]=this.vertices[a].vector.dup()},getStartVertex(a){this.newHalfEdges[a].face;let b,c=a;do b=c,c=this.newHalfEdges[c].next;while(c!=a);return this.newHalfEdges[b].vertex},doSubdivision(){this.generateNewVertices(),this.updateVertices(),this.faceSplit(),this.makeHalfEdgeInfo(),this.vertices=[].concat(this.newVertices),this.faces=[].concat(this.newFaces),this.halfEdges=[].concat(this.newHalfEdges),this.transformedVertices=[];for(let b=0;b<this.vertices.length;++b)this.transformedVertices.push(a.$V([0,0,0,1]))},generateNewVertices(){this.newVertices=this.vertices.map((a)=>{return{vector:a.vector,halfEdge:a.halfEdge}});this.vertices.length;this.edgeMap=Array(this.halfEdges.length).fill(-1);for(let b=0;b<this.faces.length;++b){const c={vector:a.$V([0,0,0,1]),halfEdge:0};for(let a=0;4>a;++a)c.vector=c.vector.add(this.vertices[this.faces[b].vertices[a]].vector);c.vector=c.vector.multiply(1/4),c.vector.elements[3]=1,this.faces[b].facePoint=this.newVertices.length,this.newVertices.push(c)}for(let b=0;b<this.edgeMap.length;++b){if(-1!=this.edgeMap[b])continue;const c={vector:a.$V([0,0,0,1]),halfEdge:0};let d=f(b/4),g=this.faces[d].vertices[e.HalfEdge.getEndVertex(b)];c.vector=c.vector.add(this.vertices[g].vector),c.vector=c.vector.add(this.newVertices[this.faces[d].facePoint].vector);let h=this.halfEdges[b].pair;d=f(h/4),g=this.faces[d].vertices[e.HalfEdge.getEndVertex(h)],c.vector=c.vector.add(this.vertices[g].vector),c.vector=c.vector.add(this.newVertices[this.faces[d].facePoint].vector),c.vector=c.vector.multiply(1/4),c.vector.elements[3]=1,this.edgeMap[b]=this.newVertices.length,-1!=h&&(this.edgeMap[h]=this.newVertices.length),this.newVertices.push(c)}},updateVertices(){for(let b=0;b<this.vertices.length;++b){let g=this.vertices[b].halfEdge,h=g,i=0,j=a.$V([0,0,0,1]),k=a.$V([0,0,0,1]);do{i+=1,h=this.halfEdges[h].pair;let c=f(h/4),d=this.faces[c].vertices[e.HalfEdge.getEndVertex(h)],g=this.vertices[b].vector.add(this.vertices[d].vector).multiply(0.5);j=j.add(g),k=k.add(this.newVertices[this.faces[c].facePoint].vector),h=4*f(h/4)+(h+3)%4}while(h!=g);j=j.multiply(1/i),k=k.multiply(1/i),j.elements[3]=1,k.elements[3]=1;let l=k.add(j.multiply(2)),c=this.vertices[b].vector.multiply(i-3);this.newVertices[b].halfEdge=-1,this.newVertices[b].vector=l.add(c),this.newVertices[b].vector=this.newVertices[b].vector.multiply(1/i),this.newVertices[b].vector.elements[3]=1}for(let a=0;a<this.vertices.length;++a)this.vertices[a].halfEdge=-1},faceSplit(){this.newFaces=[];this.vertices.length;for(let a=0;a<this.faces.length;++a){let b=4*a,c=this.faces[a].vertices[0],d=this.faces[a].vertices[1],e=this.faces[a].vertices[2],f=this.faces[a].vertices[3],g=this.edgeMap[b],i=this.edgeMap[b+1],j=this.edgeMap[b+2],k=this.edgeMap[b+3],l=this.faces[a].facePoint;this.newFaces.push({vertices:[c,g,l,k]});let m=4*(this.newFaces.length-1);this.newVertices[c].halfEdge=m+3,this.newVertices[g].halfEdge=m,this.newVertices[l].halfEdge=m+1,this.newVertices[k].halfEdge=m+2,this.newFaces.push({vertices:[g,d,i,l]}),m+=4,this.newVertices[d].halfEdge=m,this.newVertices[i].halfEdge=m+1,this.newFaces.push({vertices:[i,e,j,l]}),m+=4,this.newVertices[e].halfEdge=m,this.newVertices[j].halfEdge=m+1,this.newFaces.push({vertices:[j,f,k,l]}),this.newVertices[f].halfEdge=m+4}},makeHalfEdgeInfo(){this.newHalfEdges=[];for(let a,b=0;b<this.faces.length;++b)a=16*b,this.newHalfEdges.push({pair:this.getIndex(4*b,0)}),this.newHalfEdges.push({pair:a+7}),this.newHalfEdges.push({pair:a+14}),this.newHalfEdges.push({pair:this.getIndex(4*b+3,1)}),this.newHalfEdges.push({pair:this.getIndex(4*b,1)}),this.newHalfEdges.push({pair:this.getIndex(4*b+1,0)}),this.newHalfEdges.push({pair:a+11}),this.newHalfEdges.push({pair:a+1}),this.newHalfEdges.push({pair:this.getIndex(4*b+1,1)}),this.newHalfEdges.push({pair:this.getIndex(4*b+2,0)}),this.newHalfEdges.push({pair:a+15}),this.newHalfEdges.push({pair:a+6}),this.newHalfEdges.push({pair:this.getIndex(4*b+2,1)}),this.newHalfEdges.push({pair:this.getIndex(4*b+3,0)}),this.newHalfEdges.push({pair:a+2}),this.newHalfEdges.push({pair:a+10})},getIndex(a,b){const c=this.halfEdges[a].pair;if(-1==c)return-1;let d=16*f(c/4);return d+[4,0,8,5,12,9,3,13][2*(c%4)+b]}};return h});