define(['js/twgl','js/2d-boilerplate','js/sylvester','js/style','js/util'],function(a,b,c,d,e){'use strict';const f={MidpointSubdivision(a,b){this.Program(this.render,{container:a,idPrefix:b,width:640,height:480}),this.points=[],this.curvePoints=[],this.isDragging=!1,this.isMouseJustPressed=!0,this.draggedPoint=null,this.pointCount=3,this.isShowOriginal=!0,this.isShowActual=!0,this.refined=!1,this.s=1/8},initDOM(){const a=this.settings.container;a.css('display','flex');const b=$('<span></span>');b.css('flex','1');const c=$('<div></div>');c.addClass('canvas-controller'),c.append(this.createButton('refine','Finom\xEDt\xE1s',()=>this.refine())),c.append(this.createButton('restart','Pontok t\xF6rl\xE9se',()=>this.restart())),c.append(this.createCheckbox('Eredeti kontrollpoligon megjelen\xEDt\xE9se','isshoworiginal',(a)=>this.changeIsShowOriginal(a))),c.append(this.createCheckbox('Aktu\xE1lis kontrollpontok megjelen\xEDt\xE9se','isshowactual',(a)=>this.changeIsShowActual(a))),b.append(c);const d=$('<span></span>');d.css('flex','2'),d.append(this.canvasMarkup()),a.append(b),a.append(d)},createButton(a,b,c){const d=this.withPrefix(a),e=$('<span></span>');e.addClass('slider-container');const f=$(`<button>${b}</button>`);f.on('click',c),e.append(f);const g=$('<div></div>');return g.addClass('controller-input-container'),g.append(e),g},createCheckbox(a,b,c){const d=this.withPrefix(b),e=$(`<input checked type="checkbox" id="${d}" name="${d}"/>`);e.on('change',c);const f=$('<div></div>');return f.addClass('controller-input-container'),f.append(`<label for="${d}">${a}</label>`),f.append(e),f},changeIsShowActual(a){this.isShowActual=a.target.checked},changeIsShowOriginal(a){this.isShowOriginal=a.target.checked},getClickedPoint(a){for(let b=0;b<this.points.length;++b)if(10>=this.points[b].distanceFrom(a))return this.points[b];return null},onMouseDown(a){this.isMouseJustPressed&&!this.refined&&(this.draggedPoint=this.getClickedPoint(a),this.draggedPoint?this.isDragging=!0:(this.points.push(a),this.curvePoints.push(a)),this.isMouseJustPressed=!1)},onMouseUp(){this.isDragging=!1,this.draggedPoint=null,this.isMouseJustPressed=!0},onMouseMove(a){this.isDragging&&this.draggedPoint&&(this.draggedPoint.elements=a.elements)},refine(){const a=[this.curvePoints[0]];for(let b=0;b<this.curvePoints.length-1;++b){if(0<b){const c=this.curvePoints[b-1].multiply(this.s).add(this.curvePoints[b+1].multiply(this.s));a.push(this.curvePoints[b].multiply(1-2*this.s).add(c))}a.push(this.curvePoints[b].multiply(1/2).add(this.curvePoints[b+1].multiply(1/2)))}a.push(this.curvePoints[this.curvePoints.length-1]),this.curvePoints=a,this.refined=!0},restart(){this.points=[],this.curvePoints=[],this.refined=!1},render(){this.renderOriginal(),this.renderPoints(),this.curvePoints.length>=this.pointCount&&this.renderCurve()},renderOriginal(){const b={color:d.colors.controlPolygon},c={position:{numComponents:2,data:[].concat.apply([],this.points.map((a)=>a.elements))}};this.isShowOriginal||(c.position.data=[]);const e=a.createBufferInfoFromArrays(this.gl,c);a.setBuffersAndAttributes(this.gl,this.programInfo,e),a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,e,this.gl.LINE_STRIP)},renderCurve(){const b={color:d.colors.curve},c={position:{numComponents:2,data:e.toPositionArray(this.curvePoints)}},f=a.createBufferInfoFromArrays(this.gl,c);a.setBuffersAndAttributes(this.gl,this.programInfo,f),a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,f,this.gl.LINE_STRIP)},renderPoints(){const b={color:d.colors.controlPoint},c={position:{numComponents:2,data:e.toPositionArray(this.curvePoints)}};this.isShowActual||(c.position.data=[]);const f=a.createBufferInfoFromArrays(this.gl,c);a.setBuffersAndAttributes(this.gl,this.programInfo,f),a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,f,this.gl.POINTS)}};return Object.setPrototypeOf(f,b),function(a,b){const c=Object.create(f);c.MidpointSubdivision(a,b),c.start(!1)}});