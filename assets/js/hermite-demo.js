define(['js/twgl','js/2d-boilerplate','js/sylvester','js/hermite','js/style','js/util'],function(a,b,c,d,e,f){'use strict';const g={HermiteDemo(a,b){this.Program(this.render,{container:a,idPrefix:b,width:640,height:480}),this.points=[c.$V([80,400]),c.$V([500,80]),c.$V([500,400]),c.$V([80,80])],this.curvePoints=[],this.isDragging=!1,this.isMouseJustPressed=!0,this.draggedPoint=null},getClickedPoint(a){for(let b=0;b<this.points.length;++b)if(10>=this.points[b].distanceFrom(a))return this.points[b];return null},onMouseDown(a){this.isMouseJustPressed&&(this.draggedPoint=this.getClickedPoint(a),this.draggedPoint&&(this.isDragging=!0),this.isMouseJustPressed=!1)},onMouseUp(){this.isDragging=!1,this.draggedPoint=null,this.isMouseJustPressed=!0},onMouseMove(a){this.isDragging&&this.draggedPoint&&(this.draggedPoint.elements=a.elements)},calculateCurve(){const a=c.$M([this.points[0].elements,this.points[1].elements,this.points[2].subtract(this.points[0]).elements,this.points[3].subtract(this.points[1]).elements]);this.curvePoints=d.calculateCurve(a.transpose().elements)},render(){this.renderPoints(),this.renderArrowHeads(),this.calculateCurve(),this.renderCurve()},renderCurve(){var b={color:e.colors.curve};const c={position:{numComponents:2,data:this.curvePoints}},d=a.createBufferInfoFromArrays(this.gl,c);a.setBuffersAndAttributes(this.gl,this.programInfo,d),a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,d,this.gl.LINE_STRIP)},renderPoints(){const b={color:e.colors.semiCurve},c={position:{numComponents:2,data:[...this.points[0].elements,...this.points[1].elements]}},d={position:{numComponents:2,data:[...this.points[0].elements,...this.points[2].elements,...this.points[1].elements,...this.points[3].elements]}},f=a.createBufferInfoFromArrays(this.gl,c),g=a.createBufferInfoFromArrays(this.gl,d);a.setBuffersAndAttributes(this.gl,this.programInfo,g),a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,g,this.gl.LINES),b.colors=e.colors.controlPoint,a.setBuffersAndAttributes(this.gl,this.programInfo,f),a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,f,this.gl.POINTS)},renderArrowHeads(){const b={color:e.colors.semiCurve},c=f.toPositionArray(f.arrowHead(this.points[0],this.points[2],6)),d=f.toPositionArray(f.arrowHead(this.points[1],this.points[3],6)),g={position:{numComponents:2,data:c.concat(d)}},h=a.createBufferInfoFromArrays(this.gl,g);a.setBuffersAndAttributes(this.gl,this.programInfo,h),a.setUniforms(this.programInfo,b),a.drawBufferInfo(this.gl,h,this.gl.TRIANGLES)}};return Object.setPrototypeOf(g,b),function(a,b){const c=Object.create(g);c.HermiteDemo(a,b),c.start(!1)}});